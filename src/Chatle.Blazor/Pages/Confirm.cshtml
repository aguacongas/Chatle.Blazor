@page "/login/confirm"
@inject LoginService loginService
@inject IUriHelper uriHelper

<h1>Associate your @provider account.</h1>

<form class="form-horizontal">
    <h4>Association Form</h4>
    <hr />
    <div class="text-danger">@errormessage</div>

    <p class="text-info">
        You've successfully authenticated with <strong>@provider</strong>. Please enter a user name for this site below and
        click the Register button to finish logging in.
    </p>
    <div class="form-group">
        <label class="col-md-2 control-label" for="UserName">User Name</label>
        <div class="col-md-10">
            <input class="form-control" name="UserName" value=@userName @onchange(value => Validate((string)value)) />
        </div>
    </div>
    <div class="form-group">
        <div class="col-md-offset-2 col-md-10">
            <button type="submit" class="btn btn-default" @onclick(Register)>Register</button>
        </div>
    </div>
</form>

<div>disabled= @Disabled</div>
<div>userName= @userName</div>
<div>errormessage= @errormessage</div>

@functions {
    string provider;
    string userName;
    string errormessage;
    bool Disabled { get { return string.IsNullOrEmpty(errormessage) ? false : true; } }

    protected override void OnInit()
    {
        provider = uriHelper.GetParameter("p");
        userName = uriHelper.GetParameter("u");
        Validate(userName);
    }

    async void Validate(string value)
    {
        userName = value;
        errormessage = await loginService.Validate(value);
        StateHasChanged();
    }

    async void Register()
    {
        if (Disabled)
        {
            return;
        }

        errormessage = await loginService.Register(userName);
        StateHasChanged();
        if (!Disabled)
        {
            uriHelper.NavigateTo("/");
        }
    }
}