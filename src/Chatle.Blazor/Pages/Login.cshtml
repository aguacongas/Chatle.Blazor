@page "/login"
@inject LoginService loginService
@inject Settings settings
@inject IUriHelper uriHelper
@inject ChatleHttpMessageHandler messageHandler

<h1>Login</h1>

@if (providers != null)
{
<div class="row">
    <div class="col-sm-6">
        <h2>Login with</h2>
        <form class="form-horizontal" role="form" method="post" action="@externalLogin">
            <input type="hidden" name="__RequestVerificationToken" value="@messageHandler.XHRF" />
            @foreach (var provider in providers)
            {
                <button type="submit" class="btn btn-default" name="provider" title="@provider.title" value="@provider.authenticationScheme">@provider.displayName</button>
            }
        </form>
    </div>
    <div class="col-sm-6">
        <h2>Guess access</h2>
        <form>
            <div class="form-group">
                <div class="row">
                    <label class="col-md-2 control-label" for="UserName">User Name</label>
                    <div class="col-md-10">
                        <UserName Class="form-control" bind-Value="@UserName" ErrorChanged="@OnError" PendingChanged="@OnPending"></UserName>
                    </div>
                </div>
            </div>
            <div class="form-group">
                <div class="row">
                    <div class="col-md-offset-2 col-md-10">
                        <button type="submit" class="btn btn-default" disabled="@Disabled" onclick="@Signin">Register</button>
                    </div>
                </div>
            </div>
            <div class="alert">@errormessage</div>
        </form>
    </div>
</div>
}
else
{
    <span>Loading...</span>
}

@functions {
    ExternalLoginProvider[] providers;
    string externalLogin;
    string errormessage;
    bool pending;
    string AlertClass { get { return string.IsNullOrEmpty(errormessage) ? "alert" : null; } }
    bool Disabled { get { return pending || !string.IsNullOrEmpty(errormessage); } }
    public string UserName { get; set; }

    protected override async Task OnInitAsync()
    {
        externalLogin = $"{settings.ApiBaseUrl}{settings.AccountApi}/externalLogin?returnUrl={Uri.EscapeDataString(uriHelper.GetAbsoluteUri())}/confirm";
        providers = await loginService.GetExternalLoginProviders();
    }

    void OnError(string error)
    {
        errormessage = error;
        StateHasChanged();
    }

    void OnPending(bool value)
    {
        pending = value;
        StateHasChanged();
    }

    async void Signin()
    {
        if (Disabled)
        {
            return;
        }

        errormessage = await loginService.GuessLogin(UserName);
        Console.WriteLine(errormessage);
        StateHasChanged();
        if (errormessage == null)
        {
            uriHelper.NavigateTo("/");
        }
    }
}